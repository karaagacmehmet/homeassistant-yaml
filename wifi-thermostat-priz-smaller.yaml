type: custom:button-card
entity: climate.mts960_3167_heater_cooler
name: UPS Termostat Priz
icon: mdi:thermostat-cog
tap_action:
  action: more-info
show_state: false
show_label: false
variables:
  setp: "[[[ return Number(entity.attributes.temperature) || 0 ]]]"
  cur: "[[[ return Number(entity.attributes.current_temperature) || 0 ]]]"
  action: "[[[ return entity.attributes.hvac_action || entity.state ]]]"
  mode: "[[[ return entity.attributes.hvac_mode   || entity.state ]]]"
  min: 30
  max: 60
  dz_entity: number.smart_socket_thermostat_2312185781410860080148e1e9e73167_deadzone
  use_dz_entity: true
  dz_fixed: 2
styles:
  card:
    - padding: 3px
    - "--divider-color": rgba(0,0,0,0.26)
  grid:
    - grid-template-areas: "\"i n chips\" \"bar bar bar\""
    - grid-template-columns: 42px 150px auto
  name:
    - align-self: left
    - font-weight: 430
  icon:
    - color: |
        [[[
          const a = variables.action;
          if (a==='heating') return '#ff5252';
          if (a==='cooling') return '#2196f3';
          return 'var(--secondary-text-color)';
        ]]]
  custom_fields:
    chips:
      - grid-area: chips
      - align-self: center
      - justify-self: end
    bar:
      - grid-area: bar
      - width: 100%
      - margin-top: 2px
custom_fields:
  chips: |
    [[[
      const act  = (variables.action||'').toString();
      const mode = (variables.mode||'').toString();

      const aIcon = act==='heating' ? 'mdi:fire'
                 : act==='cooling' ? 'mdi:snowflake'
                 : act==='idle'    ? 'mdi:power-standby'
                 : 'mdi:power';
      const mIcon = mode==='heat' ? 'mdi:radiator'
                 : mode==='cool' ? 'mdi:snowflake'
                 : (mode==='auto'||mode==='heat_cool') ? 'mdi:autorenew'
                 : 'mdi:power';

      const pill = (icon, label, color, value='') => `
        <span style="display:inline-flex;align-items:center;gap:6px;padding:1px 4px 1px 4px;
                     border-radius:999px;background:${color}14;border:1px solid ${color}30;
                     font-size:.75rem;margin-left:3px;">
          <ha-icon icon="${icon}" style="--mdc-icon-size:16px;color:${color}"></ha-icon>
          
          ${value?`<span style="color:var(--primary-text-color)">${value}</span>`:''}
        </span>`;

      const cNeutral='#9e9e9e', cCool='#4dabf7', cHeat='#ff6b6b';
      const actColor  = act==='heating'?'#ff784e' : act==='cooling'?'#60a5fa' : cNeutral;
      const modeColor = mode==='heat'?cHeat : mode==='cool'?cCool : (mode==='auto'||mode==='heat_cool')?'#10b981':cNeutral;
      const actText = act==='heating'?'Isıtıyor':act==='cooling'?'Soğutuyor':act==='idle'?'Beklemede':'Kapalı';

      return `
        <div style="display:flex;align-items:center;">
          ${pill(aIcon,'', actColor, actText)}
          ${pill(mIcon,'',   modeColor)}
        </div>`;
    ]]]
  bar: |
    [[[
      /* Boyutlar / boşluklar */
      const barH = 11.5;
      const gapTop = -14;          // üst balon mesafesi
      const gapBottom1 = 28;      // hedef balonu mesafesi
      const gapBottom2 = 54;     // eşik balonu (hedefin alt satırı)
      const topPad = barH + gapTop + 30;
      const botPad = gapBottom2 - 1 ;

      /* Değerler ve yüzde */
      const min = Number(variables.min), max = Number(variables.max);
      const cur = Number(variables.cur), setp = Number(variables.setp);
      const rng = Math.max(1, max - min);
      const pct = v => Math.max(0, Math.min(100, ((v - min) * 100) / rng));
      const curPct = pct(cur);
      const tgtPct = pct(setp);

      /* Deadzone */
      let dz = Number(variables.dz_fixed);
      if (variables.use_dz_entity) {
        const id = String(variables.dz_entity);
        const st = (hass && hass.states && hass.states[id] && hass.states[id].state) ? Number(hass.states[id].state) : NaN;
        dz = isNaN(st) ? dz : st;
      }
      const mode = (variables.mode||'').toString();
      const dzTemp = (mode==='cool' || mode==='auto' || mode==='heat_cool') ? (setp + dz) : (mode==='heat' ? (setp - dz) : setp);
      const dzPct  = pct(dzTemp);

      /* Balon merkezleri (çizgilerle aynı yüzde, kenarda 2..98 clamp) */
      const safe = p => (p<2?2:(p>98?98:p));
      const curLbl = safe(curPct), tgtLbl = safe(tgtPct), dzLbl = safe(dzPct);

      /* Metinler */
      const curTxt = 'Ölçülen: <b>' + cur.toFixed(1)     + '</b>°C';
      const tgtTxt = 'Hedef:  <b>'   + setp.toFixed(1)   + '</b>°C';
      const dzTxt  = 'Eşik:  <b>'    + dzTemp.toFixed(1) + '</b>°C';

      /* Moda göre dolgu */
      const fillStart = mode==='heat' ? '#ff8a65' : mode==='cool' ? '#009ac76b' : '#cfcfcf';
      const fillEnd   = mode==='heat' ? '#ff5252' : mode==='cool' ? '#009ac7' : '#bdbdbd';

      /* Δ rozet */
      const d = setp - cur;
      const showDelta =false;// Math.abs(d) >= 0.1;
      const arrow = d>0 ? 'mdi:chevron-right' : d<0 ? 'mdi:chevron-left' : 'mdi:check';
      const mid = (curPct + tgtPct) / 2;

      return `
        <div style="position:relative;width:100%;
                    padding-top:${topPad}px;padding-bottom:${botPad}px;overflow:visible;z-index:1;">

          <!-- BAR -->
          <div style="position:relative;height:${barH}px;border-radius:0px;overflow:visible;
                      background:linear-gradient(90deg,#e9ecef,#f8f9fa);
                      box-shadow:inset 0 0 0 1px var(--divider-color);">
            <!-- dolgu -->
            <div style="position:absolute;top:0;left:0;bottom:0;width:${curPct}%;
                        background:linear-gradient(90deg,${fillStart},${fillEnd});
                        transition: width .45s ease;"></div>

            <!-- ölçülen çizgi -->
            <div style="position:absolute;top:0;bottom:0;left:calc(${curPct}% - 1px);
                        width:2px;background:#ff5252;opacity:.95;transition:left .45s ease;"></div>

            <!-- hedef çizgi -->
            <div style="position:absolute;top:0;bottom:0;left:calc(${tgtPct}% - 1px);
                        width:2px;background:var(--primary-text-color);opacity:.95;transition:left .45s ease;"></div>

            <!-- eşik çizgisi -->
            <div style="position:absolute;top:0;bottom:0;left:calc(${dzPct}% - 1px);
                        width:2px;background:repeating-linear-gradient(to bottom,#f59e0b,#f59e0b 3px,transparent 3px,transparent 5px);
                        opacity:.95;transition:left .45s ease;"></div>
          </div>

          <!-- ÜST balon: ÖLÇÜLEN -->
          <div style="position:absolute;left:${curLbl}%;top:${-(barH + gapTop)}px;transform:translate(-50%,-2px);
                      background:#fff;border:1px solid var(--divider-color);padding:2px 3px;border-radius:6px;
                      font-size:.77rem;line-height:1;display:inline-flex;align-items:center;gap:6px;z-index:9;pointer-events:none;">
            <ha-icon icon="mdi:thermometer" style="--mdc-icon-size:14px;color:#ef4444"></ha-icon>
            <span>${curTxt}</span>
            <div style="position:absolute;left:50%;bottom:-5px;transform:translateX(-50%) rotate(45deg);
                        width:8px;height:8px;background:#fff;border-right:1px solid var(--divider-color);border-bottom:1px solid var(--divider-color)"></div>
          </div>

          <!-- ALT balon: HEDEF -->
          <div style="position:absolute;left:${tgtLbl}%;top:${barH + gapBottom1}px;transform:translate(-50%,6px);
                      background:#fff;border:1px solid var(--divider-color);padding:2px 3px;border-radius:6px;
                      font-size:.77rem;line-height:1;display:inline-flex;align-items:center;gap:6px;z-index:9;pointer-events:none;">
            <ha-icon icon="mdi:target-variant" style="--mdc-icon-size:14px;color:#22c55e"></ha-icon>
            <span>${tgtTxt}</span>
            <div style="position:absolute;left:50%;top:-5px;transform:translateX(-50%) rotate(45deg);
                        width:8px;height:8px;background:#fff;border-left:1px solid var(--divider-color);border-top:1px solid var(--divider-color)"></div>
          </div>

          <!-- ALT balon: EŞİK -->
          <div style="position:absolute;left:${dzLbl}%;top:${barH + gapBottom2}px;transform:translate(-50%,6px);
                      background:#fff;border:1px solid var(--divider-color);padding:2px 3px;border-radius:6px;
                      font-size:.77rem;line-height:1;display:inline-flex;align-items:center;gap:6px;z-index:9;pointer-events:none;">
            <ha-icon icon="mdi:sigma-lower" style="--mdc-icon-size:14px;color:#f59e0b"></ha-icon>
            <span>${dzTxt}</span>
            <div style="position:absolute;left:50%;top:-5px;transform:translateX(-50%) rotate(45deg);
                        width:8px;height:8px;background:#fff;border-left:1px solid var(--divider-color);border-top:1px solid var(--divider-color)"></div>
          </div>

          <!-- Δ rozet -->
          ${showDelta ? `
          <div style="position:absolute;top:${-(barH/2)}px;left:${mid}%;
                      transform:translate(-50%,-50%);display:flex;align-items:center;gap:6px;
                      background:#fff;border:1px solid var(--divider-color);padding:1px 6px;border-radius:999px;
                      font-size:.77rem;z-index:8;">
            <ha-icon icon="${arrow}" style="--mdc-icon-size:14px;color:${d>0?'#22c55e':'#ef4444'}"></ha-icon>
            <span>Δ ${Math.abs(d).toFixed(1)}°C</span>
          </div>` : ''}

          <!-- min / max (BARIN ALTINDA, UÇLARA HİZALI) -->
          <div style="position:absolute;left:0;right:0;top:${barH + gapBottom1 +1 }px;
                      display:flex;justify-content:space-between;font-size:.70rem;color:var(--secondary-text-color);">
            <span>${min}°C</span>
            <span>${max}°C</span>
          </div>
        </div>`;
    ]]]
